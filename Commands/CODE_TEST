Views

from django.db import models


class MyProject(models.Model): #Títulos de projeto

    project_name = models.CharField(max_length=255)
    company = models.CharField(max_length=255)
    comments = models.TextField()
    created_proj = models.DateTimeField(auto_now_add=True)
    update_proj = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.project_name


class Subject(models.Model): #Disciplinas do Projeto

    subject_name = models.CharField(max_length=255)
    created_sub = models.DateTimeField(auto_now_add=True)
    update_sub = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.subject_name


class DocumentStandard(models.Model): #Documentos de Projeto

    documment_name = models.CharField(max_length=255)
    doc_type = models.CharField(max_length=3)
    #doc_type = models.CharField(max_length=3, primary_key=True)
    doc_format = models.CharField(max_length=15)
    doc_type_page = models.CharField(max_length=2)
    created_doc = models.DateTimeField(auto_now_add=True)
    update_doc = models.DateTimeField(auto_now=True)
  
    def __str__(self):
        return self.doc_type


class Employee(models.Model): #Lista de Funcionários

    emp_name = models.CharField(max_length=255)
    emp_office = models.CharField(max_length=255)
    emp_contrato = models.CharField(max_length=20)
    created_emp = models.DateTimeField(auto_now_add=True)
    update_emp = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.emp_name


class StatusDoc(models.Model): #Lista de Status do Projeto

    doc_status = models.CharField(max_length=50)
    created_st = models.DateTimeField(auto_now_add=True)
    update_st = models.DateTimeField(auto_now=True)
  
    def __str__(self):
        return self.doc_status


class Action(models.Model): #Lista de Acões

    action_type = models.CharField(max_length=12)
    created_st = models.DateTimeField(auto_now_add=True)
    update_st = models.DateTimeField(auto_now=True)
  
    def __str__(self):
        return self.action_type


class Cotation(models.Model): #Lista de Acões

    proj_name = models.ForeignKey(MyProject, on_delete=models.CASCADE)
    subject_name = models.ForeignKey(Subject, on_delete=models.CASCADE)
    #doc_name = models.IntegerField(primary_key = True)
    doc_name = models.ForeignKey('DocumentStandard', on_delete=models.CASCADE)
    qt_page = models.DecimalField(max_digits=4, decimal_places=0, blank=True, null=True)
    qt_doc = models.DecimalField(max_digits=4, decimal_places=0, blank=True, null=True)
    qt_hh = models.DecimalField(max_digits=7, decimal_places=2, blank=True, null=True)
    created_ct = models.DateTimeField(auto_now_add=True)
    update_ct = models.DateTimeField(auto_now=True)
  
    def __str__(self):
        return str(self.subject_name)
        
        
        
        
        
        
        
        
        
        
        
        
 models       
        
        
        from django.shortcuts import render, get_object_or_404, redirect
#from django.contrib.auth.decorators import login_required
#from django.core.paginator import Paginator
from django.http import HttpResponse
#from .forms import TaskForm
#from django.contrib import messages
from .models import MyProject, DocumentStandard, Subject, Action, StatusDoc, Employee, Cotation
#import sqlite3
#import pandas as pd

def hello(request):
    return HttpResponse('<h1>Hello!</h1>')


def index(request):

    MyProjects = MyProject.objects.all().order_by('project_name')
    DocumentStandards = DocumentStandard.objects.all().order_by('doc_type') 
    Actions = Action.objects.all().order_by('-action_type')
    StatusDocs = StatusDoc.objects.all().order_by('-doc_status')
    Employees = Employee.objects.all().order_by('-emp_name')
    Cotations = Cotation.objects.all().order_by('-proj_name')

    return render(request, 'taskproject/index.html', {'MyProjects': MyProjects, 'DocumentStandards': DocumentStandards, 'Actions': Actions, 'StatusDocs':StatusDocs, 'Employees':Employees, 'Cotations':Cotations})


def projectlist(request):

    MyProjects = MyProject.objects.all().order_by('project_name')
    cols = ['NOME DO PROJETO', 'NOME DA EMPRESA','COMENTÁRIOS', 'DATA DE CRAÇÃO', 'ULTIMA ATUALIZAÇÃO']

    return render(request, 'taskproject/projetos.html', {'MyProjects': MyProjects, 'cols':cols})



def documtypelist(request):
    
    DocumentStandards = DocumentStandard.objects.all().order_by('doc_type') 

    cols = ['NOME DO DOCUMENTO', 'TIPO DE DOC','FORMATO', 'NÚMERO DE PAG', 'DATA DE CRAÇÃO', 'ULTIMA ATUALIZAÇÃO']

    return render(request, 'taskproject/tipos-documentos.html', {'DocumentStandards': DocumentStandards, 'cols':cols})



def Subjectlist(request):
    
    Subjects = Subject.objects.all().order_by('-subject_name') 

    return render(request, 'taskproject/disciplinas.html', {'Subjects': Subjects})



def Actionlist(request):
    
    Actions = Action.objects.all().order_by('-action_type') 

    return render(request, 'taskproject/action.html', {'Actions': Actions})



def Statuslist(request):
    
    StatusDocs = StatusDoc.objects.all().order_by('-doc_status') 

    return render(request, 'taskproject/status-doc.html', {'StatusDocs': StatusDocs})



def Employeelist(request):
    
    Employees = Employee.objects.all().order_by('-emp_name')
    cols = ['NOME DO COLABORADOR', 'CARGO', 'REGISTRO', 'DATA DE CRAÇÃO', 'ULTIMA ATUALIZAÇÃO']

    return render(request, 'taskproject/employee.html', {'Employees': Employees, 'cols':cols})


def Cotationlist(request):

    Cotations = Cotation.objects.all().order_by('-proj_name')
    DocStandards = DocumentStandard.objects.all().order_by('doc_type')
    #test = Cotation.objects.all().select_related('doc_name')

    new_list = Cotation.objects.raw(f'''
                                    SELECT a.proj_name_id AS NOME
                                    FROM taskproject_cotation AS a
    ''')

    cols = ['NOME DO PROJETO', 'DISCIPLINA', 'COD. DOC.', 'QD. FOLHAS', 'QT. DOC', 'HH', 'DATA DE CRAÇÃO', 'ULTIMA ATUALIZAÇÃO','TEST']

    return render(request, 'taskproject/cotation.html', {'Cotations':Cotations, 'DocStandards':DocStandards,'cols':cols, 'new_list':new_list})

    #taskproject_documentstandard;

'''new_list = Cotation.objects.raw(f
                                    SELECT a.proj_name AS NOME
                                    FROM taskproject_cotation AS a
                                    INNER JOIN taskproject_documentStandard AS b on b.doc_type = a.doc_name;
    )

    SELECT * FROM taskproject_cotation;

    '''
	
	
  
  
  
  
  
  
  
  
  
  
  
  Cotation page
  
  {% extends 'base.html' %}

{% block title %}Cotação{% endblock %}
{% block content %}
<!-- Content -->
<div id="content" class="flex">
        
    <h1>Lista de Funcionários</h1>
    
    <div id="content-main">
        <ul class="object-tools">
            <li>
                <a href="#" class="addlink">
                Cotação de Projeto
                </a>
            </li>
        </ul>

        <div class="module" id="changelist">
            <div class="changelist-form-container">

                <form id="changelist-form" method="post" novalidate><input type="hidden" name="csrfmiddlewaretoken" value="QX6yR3DBmAPo3jIEYftTUmXE2cnTlzoSnNzkNHDBGGHYr49UPe5mhDe8MsmBBy1i">

                <!-- Caixa de seleção - CheckBox -->
                <div class="actions">
                    <label>Action: <select name="action" required>
                    <option value="" selected>---------</option>
                    <option value="delete_selected">Delete</option>
                    </select></label>
                    <input type="hidden" name="select_across" value="0" class="select-across">
                    <button type="submit" class="button" title="Run the selected action" name="index" value="0">Go</button>
                    <span class="action-counter" data-actions-icnt="3">0 of 3 selected</span>
                </div>

                <!-- Lista de Iten das Tabelas -->
                <div class="results">
                    <table id="result_list">
                    <thead>
                        <tr>
                            <th scope="col"  class="action-checkbox-column">
                                <div class="text"><span><input type="checkbox" id="action-toggle"></span></div>
                                <div class="clear"></div>
                            </th>
                            {% for col in cols %}
                            <th scope="col"  class="column-__str__">
                                <div class="text"><a href="?o=2">{{ col }}</a></div>
                                <div class="clear"></div>
                            </th>
                            {% endfor %}
    
                        </tr>
                    </thead>
                    <tbody>

                        {% for cotation in Cotations %}
                            <tr>
                                <td class="action-checkbox"><input type="checkbox" name="_selected_action" value="1" class="action-select"></td>
                                <th class="field-project_name"><a href="{{xxx.id}}">{{cotation}}</a></th>
                                <td class="field-comments">{{cotation.subject_name}}</td>
                                <td class="field-comments">{{cotation.doc_name}}</td>
                                <td class="field-comments">{{cotation.qt_page}}</td>
                                <td class="field-comments">{{cotation.qt_doc}}</td>
                                <td class="field-comments">{{cotation.qt_hh}}</td>
                                <td class="field-comments">{{cotation.created_ct}}</td>
                                <td class="field-comments">{{cotation.update_ct}}</td>
                                {% for list in new_list %}
                                   
                                    
                                        <td class="field-comments"> +++++ {{list.doc_name}}</td>
                                        <td class="field-comments"> +++++ {{list.proj_name}}</td>
                       

                                {% endfor %}
                                </td>

                                


                            </tr>
                        {% endfor %}
                    </tbody>
                    </table>
                </div>

                <p class="paginator">3 document standards</p>

            </form>
        </div>

    </div>
</div>

{% endblock %}


  
